JavaScript Function Definitions:

JavaScript functions are defined with the function keyword.
You can use a function declaration or a function expression.

1.Function Declarations
  you learned that functions are declared with the following syntax:
  function functionName(parameters) {
  // code to be executed
  }
Declared functions are not executed immediately.
They are "saved for later use", and will be executed later, when they are invoked (called upon).
Example:
let x = myFunction(4, 3);
document.getElementById("demo").innerHTML = x;
function myFunction(a, b) {
  return a * b;
}


2.Function Expressions
A JavaScript function can also be defined using an expression.
A function expression can be stored in a variable:
Example
const x = function (a, b) {return a * b};
After a function expression has been stored in a variable, the variable can be used as a function:
const x = function (a, b) {return a * b};
document.getElementById("demo").innerHTML = x(4, 3);

The function above is actually an anonymous function (a function without a name).
Functions stored in variables do not need function names. They are always invoked (called) using the variable name.
-----------------------------------------------------------------------------------------------------------------

Function Hoisting:
Hoisting is JavaScript's default behavior of moving declarations to the top.

JavaScript Declarations are Hoisted:
In JavaScript, a variable can be declared after it has been used.
In other words; a variable can be used before it has been declared.
Example 1 gives the same result as Example 2:

x = 5; // Assign 5 to x
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x;                     // Display x in the element
var x; // Declare x

Example 2
var x; // Declare x
x = 5; // Assign 5 to x
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x; // Display x in the element

To understand this, you have to understand the term "hoisting".
Hoisting is JavaScript's default behavior of moving all declarations to the top of the 
current scope (to the top of the current script or the current function).

The let and const Keywords-
Variables defined with let and const are hoisted to the top of the block, but not initialized.
Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared.
Using a let variable before it is declared will result in a ReferenceError.
Example
This will result in a ReferenceError:
carName = "Volvo";
let carName;


Hoisting applies to variable declarations and to function declarations.
Because of this, JavaScript functions can be called before they are declared:
myFunction(5);
function myFunction(y) {
  return y * y;
}
*Functions defined using an expression are not hoisted.*

_________________________________________________________________________________________________________

Parameters and Arguments:-

  functions can have parameters:
function functionName(parameter1, parameter2, parameter3) {
  // code to be executed
}

Function parameters are the names listed in the function definition.
Function arguments are the real values passed to (and received by) the function.

 function add(x, y){
	return x + y
}
add(2, 3)
We have introduced x and y here and changed the location of the 2 and 3. 
x and y are the parameters while 2 and 3 are the arguments here.
A parameter is one of the variables in a function. 
And when a method is called, the arguments are the data you pass into the method's parameters.

________________________________________________________________________________________________________

Function Invocation:
The code inside a JavaScript function will execute when "something" invokes it.

Invoking a JavaScript Function:
The code inside a function is not executed when the function is defined.
The code inside a function is executed when the function is invoked.
It is common to use the term "call a function" instead of "invoke a function".

function myFunction(a, b) {
  return a * b;
}
myFunction(10, 2);           // Will return 20

_________________________________________________________________________________________________________

Function Call:
With the call() method, you can write a method that can be used on different objects.

Example:
cont person={
  firstname : "john",
  lastname  : "doe",
      age   : 50,
  fullname  : function(){
   retrun this.firstname + " " +this.lastname;
}}
document.getElementbyId("demo").innerHTML = person.fullname();


with call() you can call a method that can be used on different objects.
EXAMPLE:
const person = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
const person1 = {
  firstName:"John",
  lastName: "Doe"
}
const person2 = {
  firstName:"Mary",
  lastName: "Doe"
}

// This will return "John Doe":
person.fullName.call(person1);
OUTPUT: John Doe


const person={
fullname : function(){
retrun this.firstname + " " + this.lastname;
}
}
{
const person1 = {
firstname : "ramya",
lastname  : "ganeshan"
}
const person2 = {
firstname : "jothi",
lastname  : 'sri'
}
document.getElementById("demo").innerHTML = person.fullname.call(person2);



The call() method can accept arguments:
Example
const person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}

const person1 = {
  firstName:"John",
  lastName: "Doe"
}

person.fullName.call(person1, "Oslo", "Norway");















  
  




















  
