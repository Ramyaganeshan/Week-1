ECMAScript 2015, also known as ES6, introduced JavaScript Classes.
JavaScript Classes are templates for JavaScript Objects.

JavaScript Class Syntax:
Use the keyword class to create a class.
Always add a method named constructor():

Syntax:
class ClassName {
  constructor() { ... }
}

Example:
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
}
The example above creates a class named "Car".
The class has two initial properties: "name" and "year".

A JavaScrpt class is not an object.
It is a template for JavaScript objects.


  Using a Class:
When you have a class, you can use the class to create objects:

<p id="demo"></p>
<script>
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }}
const myCar1 = new Car("Ford", 2014);
const myCar2 = new Car("Audi", 2019);
document.getElementById("demo").innerHTML =
myCar1.name + " " + myCar2.name;
</script>

The exmple above uses the Car class to create two Car objects.
The constructor method is called automatically when a new object is created.

  

  The Constructor Method:-
The constructor method is a special method:

It has to have the exact name "constructor"
It is executed automatically when a new object is created
It is used to initialize object properties
If you do not define a constructor method, JavaScript will add an empty constructor method.
__________________________________________________________________________________________________________________________________________________________________  

JavaScript Class Inheritance:-
  
Class Inheritance:
To create a class inheritance, use the extends keyword.
A class created with a class inheritance inherits all the methods from another class:

Example:
  class Car {
  constructor(brand) {
    this.carname = brand;
  }
  present() {
    return 'I have a ' + this.carname;
  }}
class Model extends Car {
  constructor(brand, mod) {
    super(brand);
    this.model = mod;
  }
  show() {
    return this.present() + ', it is a ' + this.model;
  }}
let myCar = new Model("Ford", "Mustang");
document.getElementById("demo").innerHTML = myCar.show();


The super() method refers to the parent class.
By calling the super() method in the constructor method,
we call the parent's constructor method and get access to the parent's properties and methods.

***Inheritance is useful for code reusability: reuse properties and methods of an existing class when you create a new class.
_______________________________________________________________________________________________________________________________________________________________________


























  





  
