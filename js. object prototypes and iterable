All JavaScript objects inherit properties and methods from a prototype.

In the previous chapter we learned how to use an object constructor:
Example
function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}
const myFather = new Person("John", "Doe", 50, "blue");
const myMother = new Person("Sally", "Rally", 48, "green");

To add a new property to a constructor, you must add it to the constructor function:
Example
function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
  this.nationality = "English";


Prototype Inheritance:-
  
All JavaScript objects inherit properties and methods from a prototype:
Date objects inherit from Date.prototype
Array objects inherit from Array.prototype
Person objects inherit from Person.prototype
The Object.prototype is on the top of the prototype inheritance chain:

Date objects, Array objects, and Person objects inherit from Object.prototype.

Adding Properties and Methods to Objects:
Sometimes you want to add new properties (or methods) to all existing objects of a given type.
Sometimes you want to add new properties (or methods) to an object constructor.
The JavaScript prototype property allows you to add new properties to object constructors:
EXAMPLE:
function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}
Person.prototype.nationality = "English";

  
  The JavaScript prototype property also allows you to add new methods to objects constructors
EXAMPLE:
function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

Person.prototype.name = function() {
  return this.firstName + " " + this.lastName
};
________________________________________________________________________________________________________________

  Iteration Object:
Iterable objects are objects that can be iterated over with for..of.
Technically, iterables must implement the Symbol.iterator method.
You can use a for..of loop to iterate over the elements of an Array.


    JavaScript Iterators
    The iterator protocol defines how to produce a sequence of values from an object.
    An object becomes an iterator when it implements a next() method.
    The next() method must return an object with two properties:

value (the next value)
done (true or false)
value	The value returned by the iterator
(Can be omitted if done is true)
done	true if the iterator has completed
false if the iterator has produced a new value

  <!DOCTYPE html>
<html>
<body>
<h2>JavaScript Iterables</h2>
<p>Home Made Iterable:</p>

<p id="demo"></p>

<script>
// Home Made Iterable
function myNumbers() {
  let n = 0;
  return {
    next: function() {
      n += 2;
      return {value:n, done:true};
    }
  };
}

// Create Iterable
const n = myNumbers();
n.next();
n.next();
document.getElementById("demo").innerHTML = n.next().value;
</script>
</body>
</html>












  
