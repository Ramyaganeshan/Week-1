
Loops can execute a block of code a number of times.

JavaScript Loops:
Loops are handy, if you want to run the same code over and over again, each time with a different value.
Often this is the case when working with arrays:

Instead of writing:
text += cars[0] + "<br>";
text += cars[1] + "<br>";
text += cars[2] + "<br>";
text += cars[3] + "<br>";
text += cars[4] + "<br>";
text += cars[5] + "<br>";

You can write:
for (let i = 0; i < cars.length; i++) {
  text += cars[i] + "<br>";
}

Example:
<html>
<body>
<h2>JavaScript For Loop</h2>
<p id="demo"></p>
<script>
const cars = ["BMW", "Volvo", "Saab", "Ford", "Fiat", "Audi"];

let text = "";
for (let i = 0; i < cars.length; i++) {
  text += cars[i] + "<br>";
}
document.getElementById("demo").innerHTML = text;
</script>
</body>
</html>


Different Kinds of Loops
for - loops through a block of code a number of times
for/in - loops through the properties of an object
for/of - loops through the values of an iterable object


The For Loop:
The for statement creates a loop with 3 optional expressions:
syntax:
for (expression 1; expression 2; expression 3) {
  // code block to be executed
}
Example:
let text = "";
for (let i = 0; i < 5; i++) {
  text += "The number is " + i + "<br>";
}
document.getElementById("demo").innerHTML = text;
Output:
The number is 0
The number is 1
The number is 2
The number is 3
The number is 4

Expression 1 sets a variable before the loop starts (let i = 0).
Expression 2 defines the condition for the loop to run (i must be less than 5).
Expression 3 increases a value (i++) each time the code block in the loop has been executed.

1.
And you can omit expression 1 (like when your values are set before the loop starts):
Example
let i = 2;
let len = cars.length;
let text = "";
for (; i < len; i++) {
  text += cars[i] + "<br>";
}

2.
If expression 2 returns true, the loop will start over again. If it returns false, the loop will end.
__________________________________________________________________________________________________________

For in loops:

The JavaScript for in statement loops through the properties of an Object:
roperties are the values associated with a JavaScript object.

Syntax
for (key in object) {
  // code block to be executed
}

Example:
const person = {fname:"John", lname:"Doe", age:25}; 
let txt = "";
for (let x in person) {
  txt += person[x] + " ";
}
document.getElementById("demo").innerHTML = txt;


For In Over Arrays
The JavaScript for in statement can also loop over the properties of an Array:

Syntax
for (variable in array) {
  code
}

Example
const numbers = [45, 4, 9, 16, 25];
let txt = "";
for (let x in numbers) {
  txt += numbers[x];
}

Do not use for in over an Array if the index order is important.
The array values may not be accessed in the order you expect.
It is better to use a for loop, a for of loop, or Array.forEach() when the order is important.
_____________________________________________________________________________________________________________

The For Of Loop:

The JavaScript for of statement loops through the values of an iterable object.
It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:

Looping over an Array
Example
const cars = ["BMW", "Volvo", "Mini"];
let text = "";
for (let x of cars) {
  text += x;
}

Looping over a String
Example
let language = "JavaScript";
let text = "";
for (let x of language) {
text += x;
}





































